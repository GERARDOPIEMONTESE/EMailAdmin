//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace EMailAdmin.ExternalServices.ACNetService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MembershipInformationSoapBinding", Namespace="http://172.17.1.40:8080/ws/services/MembershipInformation")]
    public partial class MembershipInformationService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getMembershipInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMembershipInformation1OperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllBizMembershipInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBizMembershipInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDateMembershipInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMultipleMembershipInformationOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MembershipInformationService() {
            this.Url = global::EMailAdmin.ExternalServices.Properties.Settings.Default.EMailAdmin_ExternalServices_ACNetService_MembershipInformationService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getMembershipInformationCompletedEventHandler getMembershipInformationCompleted;
        
        /// <remarks/>
        public event getMembershipInformation1CompletedEventHandler getMembershipInformation1Completed;
        
        /// <remarks/>
        public event getAllBizMembershipInformationCompletedEventHandler getAllBizMembershipInformationCompleted;
        
        /// <remarks/>
        public event getBizMembershipInformationCompletedEventHandler getBizMembershipInformationCompleted;
        
        /// <remarks/>
        public event getDateMembershipInformationCompletedEventHandler getDateMembershipInformationCompleted;
        
        /// <remarks/>
        public event getMultipleMembershipInformationCompletedEventHandler getMultipleMembershipInformationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.ws.icard.com", ResponseNamespace="http://172.17.1.40:8080/ws/services/MembershipInformation")]
        [return: System.Xml.Serialization.SoapElementAttribute("getMembershipInformationReturn")]
        public string getMembershipInformation(string user, string password, string pais, string codigoVoucher) {
            object[] results = this.Invoke("getMembershipInformation", new object[] {
                        user,
                        password,
                        pais,
                        codigoVoucher});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getMembershipInformationAsync(string user, string password, string pais, string codigoVoucher) {
            this.getMembershipInformationAsync(user, password, pais, codigoVoucher, null);
        }
        
        /// <remarks/>
        public void getMembershipInformationAsync(string user, string password, string pais, string codigoVoucher, object userState) {
            if ((this.getMembershipInformationOperationCompleted == null)) {
                this.getMembershipInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMembershipInformationOperationCompleted);
            }
            this.InvokeAsync("getMembershipInformation", new object[] {
                        user,
                        password,
                        pais,
                        codigoVoucher}, this.getMembershipInformationOperationCompleted, userState);
        }
        
        private void OngetMembershipInformationOperationCompleted(object arg) {
            if ((this.getMembershipInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMembershipInformationCompleted(this, new getMembershipInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="getMembershipInformation1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.ws.icard.com", ResponseNamespace="http://172.17.1.40:8080/ws/services/MembershipInformation")]
        [return: System.Xml.Serialization.SoapElementAttribute("getMembershipInformationReturn")]
        public string getMembershipInformation(string user, string password, string pais, string codigoVoucher, System.DateTime fecha) {
            object[] results = this.Invoke("getMembershipInformation1", new object[] {
                        user,
                        password,
                        pais,
                        codigoVoucher,
                        fecha});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getMembershipInformation1Async(string user, string password, string pais, string codigoVoucher, System.DateTime fecha) {
            this.getMembershipInformation1Async(user, password, pais, codigoVoucher, fecha, null);
        }
        
        /// <remarks/>
        public void getMembershipInformation1Async(string user, string password, string pais, string codigoVoucher, System.DateTime fecha, object userState) {
            if ((this.getMembershipInformation1OperationCompleted == null)) {
                this.getMembershipInformation1OperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMembershipInformation1OperationCompleted);
            }
            this.InvokeAsync("getMembershipInformation1", new object[] {
                        user,
                        password,
                        pais,
                        codigoVoucher,
                        fecha}, this.getMembershipInformation1OperationCompleted, userState);
        }
        
        private void OngetMembershipInformation1OperationCompleted(object arg) {
            if ((this.getMembershipInformation1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMembershipInformation1Completed(this, new getMembershipInformation1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.ws.icard.com", ResponseNamespace="http://172.17.1.40:8080/ws/services/MembershipInformation")]
        [return: System.Xml.Serialization.SoapElementAttribute("getAllBizMembershipInformationReturn")]
        public string getAllBizMembershipInformation(string user, string password, string pais, string codigoTarjeta) {
            object[] results = this.Invoke("getAllBizMembershipInformation", new object[] {
                        user,
                        password,
                        pais,
                        codigoTarjeta});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAllBizMembershipInformationAsync(string user, string password, string pais, string codigoTarjeta) {
            this.getAllBizMembershipInformationAsync(user, password, pais, codigoTarjeta, null);
        }
        
        /// <remarks/>
        public void getAllBizMembershipInformationAsync(string user, string password, string pais, string codigoTarjeta, object userState) {
            if ((this.getAllBizMembershipInformationOperationCompleted == null)) {
                this.getAllBizMembershipInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllBizMembershipInformationOperationCompleted);
            }
            this.InvokeAsync("getAllBizMembershipInformation", new object[] {
                        user,
                        password,
                        pais,
                        codigoTarjeta}, this.getAllBizMembershipInformationOperationCompleted, userState);
        }
        
        private void OngetAllBizMembershipInformationOperationCompleted(object arg) {
            if ((this.getAllBizMembershipInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllBizMembershipInformationCompleted(this, new getAllBizMembershipInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.ws.icard.com", ResponseNamespace="http://172.17.1.40:8080/ws/services/MembershipInformation")]
        [return: System.Xml.Serialization.SoapElementAttribute("getBizMembershipInformationReturn")]
        public string getBizMembershipInformation(string user, string password, string pais, string codigoTarjeta, System.DateTime fecha) {
            object[] results = this.Invoke("getBizMembershipInformation", new object[] {
                        user,
                        password,
                        pais,
                        codigoTarjeta,
                        fecha});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getBizMembershipInformationAsync(string user, string password, string pais, string codigoTarjeta, System.DateTime fecha) {
            this.getBizMembershipInformationAsync(user, password, pais, codigoTarjeta, fecha, null);
        }
        
        /// <remarks/>
        public void getBizMembershipInformationAsync(string user, string password, string pais, string codigoTarjeta, System.DateTime fecha, object userState) {
            if ((this.getBizMembershipInformationOperationCompleted == null)) {
                this.getBizMembershipInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBizMembershipInformationOperationCompleted);
            }
            this.InvokeAsync("getBizMembershipInformation", new object[] {
                        user,
                        password,
                        pais,
                        codigoTarjeta,
                        fecha}, this.getBizMembershipInformationOperationCompleted, userState);
        }
        
        private void OngetBizMembershipInformationOperationCompleted(object arg) {
            if ((this.getBizMembershipInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBizMembershipInformationCompleted(this, new getBizMembershipInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.ws.icard.com", ResponseNamespace="http://172.17.1.40:8080/ws/services/MembershipInformation")]
        [return: System.Xml.Serialization.SoapElementAttribute("getDateMembershipInformationReturn")]
        public string getDateMembershipInformation(string user, string password, string pais, System.DateTime fechaDesde, System.DateTime fechaHasta) {
            object[] results = this.Invoke("getDateMembershipInformation", new object[] {
                        user,
                        password,
                        pais,
                        fechaDesde,
                        fechaHasta});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDateMembershipInformationAsync(string user, string password, string pais, System.DateTime fechaDesde, System.DateTime fechaHasta) {
            this.getDateMembershipInformationAsync(user, password, pais, fechaDesde, fechaHasta, null);
        }
        
        /// <remarks/>
        public void getDateMembershipInformationAsync(string user, string password, string pais, System.DateTime fechaDesde, System.DateTime fechaHasta, object userState) {
            if ((this.getDateMembershipInformationOperationCompleted == null)) {
                this.getDateMembershipInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDateMembershipInformationOperationCompleted);
            }
            this.InvokeAsync("getDateMembershipInformation", new object[] {
                        user,
                        password,
                        pais,
                        fechaDesde,
                        fechaHasta}, this.getDateMembershipInformationOperationCompleted, userState);
        }
        
        private void OngetDateMembershipInformationOperationCompleted(object arg) {
            if ((this.getDateMembershipInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDateMembershipInformationCompleted(this, new getDateMembershipInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://services.ws.icard.com", ResponseNamespace="http://172.17.1.40:8080/ws/services/MembershipInformation")]
        [return: System.Xml.Serialization.SoapElementAttribute("getMultipleMembershipInformationReturn")]
        public string getMultipleMembershipInformation(string user, string password, string pais, string codigosVoucher) {
            object[] results = this.Invoke("getMultipleMembershipInformation", new object[] {
                        user,
                        password,
                        pais,
                        codigosVoucher});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getMultipleMembershipInformationAsync(string user, string password, string pais, string codigosVoucher) {
            this.getMultipleMembershipInformationAsync(user, password, pais, codigosVoucher, null);
        }
        
        /// <remarks/>
        public void getMultipleMembershipInformationAsync(string user, string password, string pais, string codigosVoucher, object userState) {
            if ((this.getMultipleMembershipInformationOperationCompleted == null)) {
                this.getMultipleMembershipInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMultipleMembershipInformationOperationCompleted);
            }
            this.InvokeAsync("getMultipleMembershipInformation", new object[] {
                        user,
                        password,
                        pais,
                        codigosVoucher}, this.getMultipleMembershipInformationOperationCompleted, userState);
        }
        
        private void OngetMultipleMembershipInformationOperationCompleted(object arg) {
            if ((this.getMultipleMembershipInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMultipleMembershipInformationCompleted(this, new getMultipleMembershipInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getMembershipInformationCompletedEventHandler(object sender, getMembershipInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMembershipInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMembershipInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getMembershipInformation1CompletedEventHandler(object sender, getMembershipInformation1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMembershipInformation1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMembershipInformation1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getAllBizMembershipInformationCompletedEventHandler(object sender, getAllBizMembershipInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllBizMembershipInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllBizMembershipInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getBizMembershipInformationCompletedEventHandler(object sender, getBizMembershipInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBizMembershipInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBizMembershipInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDateMembershipInformationCompletedEventHandler(object sender, getDateMembershipInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDateMembershipInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDateMembershipInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getMultipleMembershipInformationCompletedEventHandler(object sender, getMultipleMembershipInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMultipleMembershipInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMultipleMembershipInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591