<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="branch" xml:space="preserve">
    <value>sucursal</value>
  </data>
  <data name="btnAccept.Text" xml:space="preserve">
    <value>Aceptar</value>
  </data>
  <data name="btnCancel.Text" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="country" xml:space="preserve">
    <value>pais</value>
  </data>
  <data name="errorMsg" xml:space="preserve">
    <value>Ha ocurrido un error con el archivo, por favor reviselo y vuelva a intentar</value>
  </data>
  <data name="errorMsg2" xml:space="preserve">
    <value>no se encontro: </value>
  </data>
  <data name="errorRowMsg" xml:space="preserve">
    <value>puede que el error/valor no existente se encuentre en la fila</value>
  </data>
  <data name="lblBranch.Text" xml:space="preserve">
    <value>Sucursales</value>
  </data>
  <data name="lblCountry.Text" xml:space="preserve">
    <value>Paises</value>
  </data>
  <data name="lblFile.Text" xml:space="preserve">
    <value>Archivo</value>
  </data>
  <data name="lblModule.Text" xml:space="preserve">
    <value>Modulo</value>
  </data>
  <data name="lblName.Text" xml:space="preserve">
    <value>Nombre</value>
  </data>
  <data name="lblProduct.Text" xml:space="preserve">
    <value>Productos</value>
  </data>
  <data name="lblRate.Text" xml:space="preserve">
    <value>Tarífas</value>
  </data>
  <data name="lblReceive.Text" xml:space="preserve">
    <value>Recibe</value>
  </data>
  <data name="lblTemplate.Text" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="lblType.Text" xml:space="preserve">
    <value>Tipo</value>
  </data>
  <data name="lnkInstructions.Text" xml:space="preserve">
    <value>  the instructions.</value>
  </data>
  <data name="lnkSpecified.Text" xml:space="preserve">
    <value> especificado</value>
  </data>
  <data name="ltrDescription.Text" xml:space="preserve">
    <value>Complete los datos y suba el archivo (csv, xls, xlsx) con el formato</value>
  </data>
  <data name="ltrInstructions.Text" xml:space="preserve">
    <value>Para completarlo siga</value>
  </data>
  <data name="ltrInstructionsText.Text" xml:space="preserve">
    <value>Antes de empezar descarge el archivo de prueba que se encuentra en esta misma pagina.&lt;br&gt;&lt;br&gt;
                    Vera que el archivo tiene la extension xlsx, pero podra subir éste tanto como una version de excel 2003 (xls) o incluso un archivo separado por comas (csv). &lt;br&gt;
                    En la primera fila vera que se encuentran los nombres de las columnas que debera completar; esta fila nunca debe ser borrarda. &lt;br&gt;
                    La primera columna hace referencia al tipo de condicion que este grupo tendra. Los posibles tipos de condiciones son 4 y las abrebiaturas 
                    que se utilizaran en el archivo para hacer referencia a ellos seran estas: 
&lt;br&gt;&lt;br&gt;
                    CTR (refiere a codigo de Pais), ACC (refiere a sucursal), PRO (refiere a producto), RTE (refiere a tarifa) 
&lt;br&gt;&lt;br&gt;
                    Las siguientes columnas (tantas como tipos de condiciones) indican donde ud debera ubicar el valor el cual indica la primera columna. &lt;br&gt;
                    Los valores deberan respetar los siguientes formatos para cada tipo: 
&lt;br&gt;&lt;br&gt;
                    CTR - codigo del pais ej: 540 (Argentina)&lt;br&gt;
ACC - codigo de pais / codigo de cuenta / codigo de sucursal ej: 540/10/0 (Alguna sucursal de la cuenta 10 en Argentina)&lt;br&gt;
PRO - codigo de pais / codigo de producto ej: 540/R3 (Argentina, Privileged)&lt;br&gt;
RTE - codigo de pais / codigo de producto /codigo de tarifa ej: 540/R3/10036 (Alguna tarifa del producto R3 en Argentina)
&lt;br&gt;&lt;br&gt;
                    Debera agregar tantas filas como condiciones crea necesario hacen al grupo.&lt;br&gt;&lt;br&gt;</value>
  </data>
  <data name="ltrTitle.Text" xml:space="preserve">
    <value>Alta masiva de grupos</value>
  </data>
  <data name="okMsg" xml:space="preserve">
    <value>El grupo se dio de alta correctamente!</value>
  </data>
  <data name="product" xml:space="preserve">
    <value>producto</value>
  </data>
  <data name="rate" xml:space="preserve">
    <value>tarífa</value>
  </data>
</root>